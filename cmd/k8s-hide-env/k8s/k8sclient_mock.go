// Code generated by MockGen. DO NOT EDIT.
// Source: k8s/k8sclient.go

// Package k8s is a generated GoMock package.
package k8s

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// ApplySecret mocks base method.
func (m *MockKubernetesClient) ApplySecret(secretName, namespace string, data map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySecret", secretName, namespace, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySecret indicates an expected call of ApplySecret.
func (mr *MockKubernetesClientMockRecorder) ApplySecret(secretName, namespace, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySecret", reflect.TypeOf((*MockKubernetesClient)(nil).ApplySecret), secretName, namespace, data)
}

// CreateSecret mocks base method.
func (m *MockKubernetesClient) CreateSecret(secretName, namespace string, data map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secretName, namespace, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockKubernetesClientMockRecorder) CreateSecret(secretName, namespace, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockKubernetesClient)(nil).CreateSecret), secretName, namespace, data)
}

// DeleteSecret mocks base method.
func (m *MockKubernetesClient) DeleteSecret(secretName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", secretName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKubernetesClientMockRecorder) DeleteSecret(secretName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecret), secretName, namespace)
}

// GetSecret mocks base method.
func (m *MockKubernetesClient) GetSecret(secretName, namespace string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", secretName, namespace)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKubernetesClientMockRecorder) GetSecret(secretName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecret), secretName, namespace)
}
